plugins {
    id("groovy") 
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.2"
    id("io.micronaut.test-resources") version "4.4.2"
}

version = "0.1"
group = "es.feuvert.attcliente.ia"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly("io.micronaut.data:micronaut-data-processor")
    implementation("info.picocli:picocli")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    compileOnly("info.picocli:picocli-codegen")
    compileOnly("io.micronaut.serde:micronaut-serde-processor")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    implementation("es.edn:groogle:4.0.0-rc8")
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    implementation 'dev.langchain4j:langchain4j:0.35.0'
    implementation 'dev.langchain4j:langchain4j-embeddings:0.35.0'
    implementation 'dev.langchain4j:langchain4j-pgvector:0.35.0'
    implementation 'dev.langchain4j:langchain4j-embeddings-all-minilm-l6-v2-q:0.35.0'
    implementation 'dev.langchain4j:langchain4j-document-transformer-jsoup:0.35.0'
    implementation 'dev.langchain4j:langchain4j-ollama:0.35.0'
    implementation 'dev.langchain4j:langchain4j-azure-open-ai:0.35.0'
    implementation 'dev.langchain4j:langchain4j-open-ai:0.35.0'

}


application {
    mainClass = "es.feuvert.attcliente.ia.ApplicationCommand"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}



micronaut {
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("es.edn.attcliente.ia.*")
    }
}


run {
    systemProperty 'micronaut.environments', project.findProperty("envs")
    args([(project.findProperty("customer") ?: "un cliente cualquiera")] as String[])
}
